import pandas as pd
import os 

configfile: "config/config.yml"

for key, value in config.items():
    if key.startswith('DIR') and key!='DIR_output' and '/' not in value:
        config[key] = os.path.join(config['DIR_output'], value)

for key,value in config.items():
    if key.startswith('DIR') and not os.path.exists(value):
        os.makedirs(value)


# read samples 
samples=None
if "FILE_sample_list" in config and bool(config['FILE_sample_list']):
    samples=pd.read_csv(config['FILE_sample_list'], sep='\t', header=None).values.flatten()
    if len(samples)==0:
        samples=None
    else:
        print("Samples: ",samples)

if samples is None:
    print("No sample list provided. Running all samples in the assembly directory.")
    samples=[ff.split('.')[0] for ff in os.listdir(config['DIR_assembly']) if ff.endswith('.fasta')]

with open("output/samples.txt",'w') as f:
    f.write('\n'.join(samples))


rule all:
    input:
        expand(os.path.join(config['DIR_assembly'],"{sample}.fasta"),sample=samples), # assemblies        
        expand(os.path.join(config['DIR_faa'],'{sample}.faa'),sample=samples), # faa files
        expand(os.path.join(config['DIR_fna'],'{sample}.fna'),sample=samples), # fna files
        expand(os.path.join(config['DIR_16S'],'{sample}.16S.fna'),sample=samples), # 16S sequences        
        expand(os.path.join(config['DIR_CARVEME'],"{sample}.xml"),sample=samples), # gap-filled carveme models        
        expand(os.path.join(config['DIR_FBA_PREDICTION'],'{sample}.csv'),sample=samples), # fba predictions
        expand(os.path.join(config['DIR_FBA_PREDICTION'],'{sample}_force_uptake.csv'),sample=samples), # fba predictions with forced uptake
        expand(os.path.join(config['DIR_CARVEME'],"{sample}_gapfill.xml"),sample=samples), # gap-filled carveme models        
        expand(os.path.join(config['DIR_FBA_PREDICTION'],'{sample}_gapfill.csv'),sample=samples), # fba predictions
        expand(os.path.join(config['DIR_FBA_PREDICTION'],'{sample}_gapfill_force_uptake.csv'),sample=samples),
        expand(os.path.join(config['DIR_KOFAMSCAN'],'{sample}.ko'),sample=samples) # KOfamscan results

include: "rules/annotation.smk"
include: "rules/16S.smk"
include: "rules/build_models.smk"
include: "rules/run_fba.smk"